/*
   You are given a string, S, and a list of words, L, that are all of the same
   length. Find all starting indices of substring(s) in S that is a
   concatenation of each word in L exactly once and without any intervening
   characters.

   For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]
You should return the indices: [0,9].
(order does not matter).
*/

#include <vector>
#include <iostream>
#include <unordered_set>
using namespace std;

class Solution {
public:
     void findSubstringRecur(string &S, vector<string> &L, vector<bool>&
                             visited, int num, string& cur,
                             unordered_set<int> &res)
     {
         if (num == L.size()) {
             size_t pos = 0;
             while ((pos = S.find(cur, pos)) != string::npos) {
                 if (res.find(pos) == res.end()) {
                     res.insert(res.end(), pos);
                 }
                 pos++;
             }
             return;
         }
         for (int i = 0; i < L.size(); i++) {
             if (visited[i]) continue;
             visited[i] = true;
             cur.insert(cur.length(), L[i]);
             findSubstringRecur(S, L, visited, num+1, cur, res);
             cur.erase(cur.length()-L[i].length());
             visited[i] = false;
         }
     }

     vector<int> findSubstring(string S, vector<string> &L) {
         // Find all permutations of strings in L and find substring in S
         int len = L.size();
         vector<int> ret;
         if (!len) return ret;

         unordered_set<int> uniqIndices;
         vector<bool> visited = {false};
         string cur;
         findSubstringRecur(S, L, visited, 0, cur, uniqIndices);

         unordered_set<int>::const_iterator it;
         for (it = uniqIndices.begin(); it != uniqIndices.end(); it++) {
             ret.push_back(*it);
         }

         return ret;
     }
};

int main()
{
    Solution s;
    string S("barfoothefoobarmanbarfoo");
    vector<string> L = {"foo", "bar"};

    vector<int> ret;

    ret = s.findSubstring(S, L);

    for (int i = 0; i < ret.size(); i++) {
        cout << ret[i] << ",";
    }
    cout << endl;
}
