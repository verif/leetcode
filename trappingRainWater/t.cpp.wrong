/*
   Given n non-negative integers representing an elevation map where the width
   of each bar is 1, compute how much water it is able to trap after raining.

   For example, 
   Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.
*/

#include <iostream>
using namespace std;

class Solution {
public:
     int trap(int A[], int n) {
         if (n < 3) return 0;
         int ret = 0;

         // Need to find a decreasing sequence, followed by an increasing
         // sequence
         int left = -1;
         int width = -1;
         int total = 0;
         int prev = A[0];
         int i = 1;
         bool onLeft = false;
         bool onRight = false;

         while (i < n) {
             if (A[i] > prev) {
                 if (onLeft) {
                     onLeft = false;
                     onRight = true;
                 }
                 if ((onLeft || onRight) && A[i] <= A[left]) {
                     width++;
                     total += (A[left]-A[i]);
                 }
             }
             else if (A[i] < prev) {
                 if (onRight) {
                     // We can compute last saved water now
                     ret += total;
                     if (prev < A[left]) {
                         ret -= width * (A[left]-prev);
                     }
                     left = i-1;
                     onLeft = true;
                     onRight = false;
                     width = 1;
                     total = A[left]-A[i];
                 }
                 else {
                     if (onLeft) {
                         width++;
                         total += (A[left]-A[i]);
                     }
                     else {
                         left = i-1;
                         onLeft = true;
                         width = 1;
                         total = A[left]-A[i];
                     }
                 }
             }
             else {
                 if (onLeft || (onRight && A[i] <= A[left])) {
                     width++;
                     total += (A[left]-A[i]);
                 }
             }
             prev = A[i];
             i++;
         }
         return ret;
     }
};

int main()
{
    Solution s;
    int A[] = {0,1,0,3,1,0,1,3,2,1,2,1};
    int ret;

    ret = s.trap(A, 12);
    cout << ret << endl;
}
