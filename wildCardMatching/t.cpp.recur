/*
   Implement wildcard pattern matching with support for '?' and '*'.
   '?' Matches any single character.
   '*' Matches any sequence of characters (including the empty sequence).

   The matching should cover the entire input string (not partial).
   The function prototype should be:
   bool isMatch(const char *s, const char *p)

   Some examples:
   isMatch("aa","a") -> false
   isMatch("aa","aa") -> true
   isMatch("aaa","aa") -> false
   isMatch("aa", "*") -> true
   isMatch("aa", "a*") -> true
   isMatch("ab", "?*") -> true
   isMatch("aab", "c*a*b") -> false
*/

#include <iostream>
#include <string>
#include <string.h>
using namespace std;

class Solution {
public:
     bool isMatch(const char *s, const char *p) {
         if (!*p) return !*s;
         if (!*s) return !*p;

         const char* p1 = p;
         const char* p2 = s;

         while (p1) {
             if (*p1 == '?') {
                 return isMatch(p2+1, p1+1);
             }
             else if (*p1 == '*') {
                 while (*p1 && *p2 && (*p1 == '*' || *p1 == '?')) {
                        if (*p1 == '?') {
                            p2++;
                        }
                        p1++;
                 }
                 if (!*p1) return true;
                 if (!*p2 && *p1 && *p1 != '*') return false;
                 string str;
                 while (*p1 && *p1 != '*' && *p1 != '?') {
                     str.push_back(*p1);
                     p1++;
                 }
                 while (p2=strstr(p2, str.c_str())) {
                     if (isMatch(p2+str.length(), p1)) return true;
                     p2 += str.length();
                 }
                 return false;
             }
             else {
                 if (*p2 != *p1) return false;
                 return isMatch(p2+1, p1+1); 
             }
             p1++;
         }

         return true;
     }
};

int main()
{
    Solution s;

    cout << "aa, a is " << s.isMatch("aa", "a") << endl;
    cout << "aa, aa is " << s.isMatch("aa", "aa") << endl;
    cout << "aaa, aa is " << s.isMatch("aaa", "aa") << endl;
    cout << "aa, * is " << s.isMatch("aa", "*") << endl;
    cout << "aa, a* is " << s.isMatch("aa", "a*") << endl;
    cout << "ab, ?* is " << s.isMatch("ab", "?*") << endl;
    cout << "aab, c*a*b is " << s.isMatch("aab", "c*a*b") << endl;
    cout << "aab, *a*b is " << s.isMatch("aab", "*a*b") << endl;
    cout << "aab, *a??*b is " << s.isMatch("aab", "*a??*b") << endl;
    cout << "b, **? is " << s.isMatch("b", "**?") << endl;
    cout << "b, **?? is " << s.isMatch("b", "**??") << endl;
    cout <<
        "abbabaaabbabbaababbabbbbbabbbabbbabaaaaababababbbabababaabbababaabbbbbbaaaabababbbaabbbbaabbbbababababbaabbaababaabbbababababbbbaaabbbbbabaaaabbababbbbaababaabbababbbbbababbbabaaaaaaaabbbbbaabaaababaaaabb, **aa*****ba*a*bb**aa*ab****a*aaaaaa***a*aaaa**bbabb*b*b**aaaaaaaaa*a********ba*bbb***a*ba*bb*bb**a*b*bb is " << s.isMatch("abbabaaabbabbaababbabbbbbabbbabbbabaaaaababababbbabababaabbababaabbbbbbaaaabababbbaabbbbaabbbbababababbaabbaababaabbbababababbbbaaabbbbbabaaaabbababbbbaababaabbababbbbbababbbabaaaaaaaabbbbbaabaaababaaaabb", "**aa*****ba*a*bb**aa*ab****a*aaaaaa***a*aaaa**bbabb*b*b**aaaaaaaaa*a********ba*bbb***a*ba*bb*bb**a*b*bb") << endl;
}
